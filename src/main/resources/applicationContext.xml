<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/task  
			http://www.springframework.org/schema/task/spring-task-3.1.xsd  ">


	<!-- 开启全注解扫描 -->
	<context:component-scan base-package="com.liuhe.redpacket"></context:component-scan>

	<!-- 启动@AspectJ支持 -->
	<aop:aspectj-autoproxy />
	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
<!-- 	<aop:aspectj-autoproxy proxy-target-class="true" /> -->

	<!-- 加载资源文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:redis.properties</value>
				<value>classpath:wx.properties</value>
				<value>classpath:system.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- 数据库配置数据 -->
	<!-- <context:property-placeholder location="classpath:db.properties" /> -->
	<!-- 配置数据源datasource dcbp -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> -->
	<!-- <property name="driverClassName" value="${jdbc.driver}" /> <property 
		name="url" -->
	<!-- value="${jdbc.url}" /> <property name="username" value="${jdbc.user}" 
		/> <property -->
	<!-- name="password" value="${jdbc.password}" /> </bean> -->
	<!-- 配置数据源datasource druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="filters" value="${jdbc.filters}" />

		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="minIdle" value="${jdbc.minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<!-- <property name="maxOpenPreparedStatusments" value="${jdbc.maxOpenPreparedStatusments}" 
			/> -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
		<!-- 数据库编码 -->
		<property name="connectionInitSqls" value="set names utf8mb4;" />
	</bean>
	<!-- Mybatis核心配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接配置 -->
		<property name="dataSource" ref="dataSource" />

		<!-- 配置sqlSessionFactory的参数 -->
		<property name="configurationProperties">
			<props>
				<!-- 开启二级缓存 -->
				<prop key="cacheEnabled">true</prop>
				<!-- 查询时，关闭关联对象即时加载以提高性能 -->
				<prop key="lazyLoadingEnabled">false</prop>
				<!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
				<prop key="aggressiveLazyLoading">true</prop>
				<!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
				<prop key="multipleResultSetsEnabled">true</prop>
				<!-- 允许使用列标签代替列名 -->
				<prop key="useColumnLabel">true</prop>
				<!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
				<prop key="useGeneratedKeys">true</prop>
				<!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
				<prop key="autoMappingBehavior">FULL</prop>
				<!-- 对于批量更新操作缓存SQL以提高性能 -->
				<prop key="defaultExecutorType">BATCH</prop>
				<!-- 数据库超过25000秒仍未响应则超时 -->
				<prop key="defaultStatusmentTimeout">25000</prop>
			</props>
		</property>

		<!-- 引入mybatis配置 -->
		<!-- 类的别名设置 -->
		<property name="typeAliasesPackage"
			value="com.liuhe.redpacket.domain,com.liuhe.redpacket.query"></property>
		<!-- 映射文件 -->
		<property name="mapperLocations"
			value="classpath:com/liuhe/redpacket/mapper/*Mapper.xml"></property>
	</bean>

	<!-- 配置声明式事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 配置切入点 ..*该包下所有资源 .*类下面所有方法 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.liuhe.redpacket.service..*.*(..))"
			id="pointcutId" />
		<!-- 关联切入点与事务属性 -->
		<aop:advisor advice-ref="adviceId" pointcut-ref="pointcutId" />
	</aop:config>
	<!-- 配置事物属性 -->
	<!-- transaction-manager与事物管理器关联,如果是transactionManager可以默认不写 -->
	<tx:advice id="adviceId" transaction-manager="transactionManager">
		<tx:attributes>
			<!--切入点的查询方法不使用事务 -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="list*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<!-- 保存异常信息不使用事物 -->
			<tx:method name="saveException" propagation="NOT_SUPPORTED" />
			<!-- 切入点的其它所有方法使用事务 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 引入其他配置文件 -->
	<import resource="classpath:applicationContext-*.xml" />

	<!-- 配置响应的方式 ,解决返回的json数据乱码问题 -->
	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- json输出的配置 -->
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>
	<!-- 配置文件上传下载 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 1024*1024*500 = 524288000 -->
		<property name="maxUploadSize" value="524288000"></property>
		<property name="resolveLazily" value="true" />
	</bean>

	<!-- quartz配置 -->
	<!-- task注解扫描 -->
	<task:annotation-driven />
	<context:annotation-config />
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<context:component-scan base-package="com.liuhe.redpacket.quartz" />

	<!-- swagger -->
	<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />

	<bean id="prop"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<array>
				<value>classpath:system.properties</value>
			</array>
		</property>
	</bean> 
	
	<bean id="WeixinAuthFilter" class="com.liuhe.redpacket.web.filter.WeixinAuthFilter"/>
</beans>